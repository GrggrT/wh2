import logging
import asyncio
import os
import psutil
from datetime import datetime
from typing import Dict, Any
from tortoise import Tortoise
from aiogram import Bot
from app.utils.scheduler import scheduler
from app.utils.timezone_sync import timezone_sync

logger = logging.getLogger(__name__)

class HealthCheck:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        
        :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        self.bot = bot
        self.last_check = None
        self.is_healthy = False
        self.admin_id = os.getenv("ADMIN_ID")
        self.check_interval = 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.alert_threshold = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
        self.error_count = 0
    
    async def check_database(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            conn = Tortoise.get_connection("default")
            await conn.execute_query("SELECT 1")
            return {
                "status": "healthy",
                "latency_ms": 0,  # TODO: –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                "connections": await conn.execute_query("SELECT count(*) FROM pg_stat_activity")[0][0]
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {
                "status": "unhealthy",
                "error": str(e)
            }
    
    async def check_telegram_api(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
        
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            start_time = datetime.now()
            me = await self.bot.get_me()
            latency = (datetime.now() - start_time).total_seconds() * 1000
            
            return {
                "status": "healthy",
                "latency_ms": round(latency, 2),
                "bot_info": {
                    "id": me.id,
                    "username": me.username,
                    "is_bot": me.is_bot
                }
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram API: {e}")
            return {
                "status": "unhealthy",
                "error": str(e)
            }
    
    async def check_scheduler(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            if not scheduler or not scheduler.scheduler.running:
                raise Exception("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            
            jobs = scheduler.scheduler.get_jobs()
            return {
                "status": "healthy",
                "jobs_count": len(jobs),
                "jobs": [
                    {
                        "id": job.id,
                        "next_run": job.next_run_time.isoformat() if job.next_run_time else None
                    }
                    for job in jobs
                ]
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            return {
                "status": "unhealthy",
                "error": str(e)
            }
    
    def check_system_resources(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            return {
                "status": "healthy",
                "memory": {
                    "total_mb": memory.total // (1024 * 1024),
                    "used_mb": memory.used // (1024 * 1024),
                    "percent": memory.percent
                },
                "disk": {
                    "total_gb": disk.total // (1024 * 1024 * 1024),
                    "used_gb": disk.used // (1024 * 1024 * 1024),
                    "percent": disk.percent
                },
                "cpu_percent": psutil.cpu_percent(interval=1)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
            return {
                "status": "unhealthy",
                "error": str(e)
            }
    
    async def check_timezone_sync(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
        
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            test_result = await timezone_sync.get_timezone_info("UTC")
            if not test_result:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ")
            
            return {
                "status": "healthy",
                "last_sync": max(timezone_sync.last_sync.values()).isoformat() if timezone_sync.last_sync else None,
                "users_synced": len(timezone_sync.last_sync)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤: {e}")
            return {
                "status": "unhealthy",
                "error": str(e)
            }
    
    async def check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        
        :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        self.last_check = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        results = {
            "database": await self.check_database(),
            "telegram_api": await self.check_telegram_api(),
            "scheduler": await self.check_scheduler(),
            "system": self.check_system_resources(),
            "timezone_sync": await self.check_timezone_sync()
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        components_healthy = all(
            component["status"] == "healthy"
            for component in results.values()
        )
        
        if components_healthy:
            self.is_healthy = True
            self.error_count = 0
        else:
            self.is_healthy = False
            self.error_count += 1
        
        results["meta"] = {
            "timestamp": self.last_check.isoformat(),
            "status": "healthy" if self.is_healthy else "unhealthy",
            "uptime_seconds": int(psutil.boot_time()),
            "error_count": self.error_count
        }
        
        return results
    
    async def notify_admin(self, status: Dict[str, Any]):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        
        :param status: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        if not self.admin_id:
            return
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_lines = [
                "üî¥ –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞:",
                "",
                f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {status['meta']['timestamp']}"
            ]
            
            for component, result in status.items():
                if component != "meta" and result["status"] == "unhealthy":
                    message_lines.extend([
                        "",
                        f"‚ùå {component}:",
                        f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    ])
            
            await self.bot.send_message(
                self.admin_id,
                "\n".join(message_lines)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        while True:
            try:
                status = await self.check()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                log_level = logging.WARNING if not self.is_healthy else logging.INFO
                logger.log(log_level, f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {status['meta']['status']}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                if self.error_count >= self.alert_threshold:
                    await self.notify_admin(status)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            
            await asyncio.sleep(self.check_interval) 