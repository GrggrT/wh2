import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, List, Any
from aiogram import Bot
from app.db.models import User, Record
from app.utils.profiler import profiler

logger = logging.getLogger(__name__)

class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        self.bot = bot
        self.notification_queue: List[Dict[str, Any]] = []
        self.is_running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_settings = {
            "system_notifications": True,
            "task_reminders": True,
            "calendar_notifications": True,
            "performance_alerts": True,
            "quiet_hours_start": 23,  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞
            "quiet_hours_end": 8,     # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞
            "notification_interval": 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        }
    
    @profiler.profile(name="add_notification")
    async def add_notification(
        self,
        user_id: int,
        notification_type: str,
        message: str,
        priority: str = "normal",
        scheduled_time: Optional[datetime] = None
    ) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        :param message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        :param priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (high, normal, low)
        :param scheduled_time: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        :return: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            notification = {
                "user_id": user_id,
                "type": notification_type,
                "message": message,
                "priority": priority,
                "scheduled_time": scheduled_time or datetime.now(),
                "created_at": datetime.now()
            }
            
            self.notification_queue.append(notification)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {notification_type}")
            return True
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def is_quiet_hours(self, user: User) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        :param user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: True –µ—Å–ª–∏ —Å–µ–π—á–∞—Å —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º
        """
        try:
            current_hour = datetime.now().hour
            return (
                current_hour >= self.default_settings["quiet_hours_start"] or
                current_hour < self.default_settings["quiet_hours_end"]
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
            return False
    
    @profiler.profile(name="process_notifications")
    async def process_notifications(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while self.notification_queue:
            notification = self.notification_queue[0]
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                if notification["scheduled_time"] <= datetime.now():
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = await User.get(telegram_id=notification["user_id"])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º
                    if notification["priority"] != "high" and await self.is_quiet_hours(user):
                        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                        notification["scheduled_time"] = (
                            datetime.now().replace(
                                hour=self.default_settings["quiet_hours_end"],
                                minute=0,
                                second=0
                            ) + timedelta(days=1)
                        )
                        continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await self.bot.send_message(
                        notification["user_id"],
                        notification["message"]
                    )
                    
                    # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    self.notification_queue.pop(0)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {notification['user_id']}")
                
                else:
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–∏—à–ª–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    break
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                self.notification_queue.pop(0)
    
    async def check_unfinished_records(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            unfinished_records = await Record.filter(
                end_time__isnull=True
            ).prefetch_related('user', 'workplace')
            
            for record in unfinished_records:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å —Å–µ–≥–æ–¥–Ω—è
                if record.start_time.date() == datetime.now().date():
                    message = (
                        f"‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å:\n"
                        f"üìç –ú–µ—Å—Ç–æ: {record.workplace.name}\n"
                        f"üïí –ù–∞—á–∞–ª–æ: {record.start_time.strftime('%H:%M')}\n"
                        f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è!"
                    )
                    
                    await self.add_notification(
                        user_id=record.user.telegram_id,
                        notification_type="task_reminder",
                        message=message,
                        priority="normal"
                    )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
    
    async def check_performance_alerts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫–∞
            stats = profiler.get_stats()
            slow_queries = profiler.analyze_slow_queries()
            
            if slow_queries:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                admin_id = int(self.bot.get_me().id)  # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞
                
                message = (
                    "üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é:\n\n"
                    f"–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
                )
                
                for operation, data in slow_queries.items():
                    message += (
                        f"- {operation}:\n"
                        f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['count']}\n"
                        f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {data['avg_time']:.2f} —Å–µ–∫\n"
                        f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {data['max_time']:.2f} —Å–µ–∫\n"
                    )
                
                await self.add_notification(
                    user_id=admin_id,
                    notification_type="performance_alert",
                    message=message,
                    priority="high"
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.is_running:
            return
        
        self.is_running = True
        logger.info("–ó–∞–ø—É—â–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        while self.is_running:
            try:
                await self.process_notifications()
                await asyncio.sleep(self.default_settings["notification_interval"])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.is_running = False
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager: Optional[NotificationManager] = None

def setup_notifications(bot: Bot) -> NotificationManager:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    :return: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    global notification_manager
    notification_manager = NotificationManager(bot)
    return notification_manager 