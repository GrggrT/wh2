import pytest
from datetime import datetime, timedelta
from aiogram import types
from app.handlers.calendar import (
    create_calendar_keyboard,
    get_day_records,
    calendar_handler,
    calendar_callback_handler
)
from app.db.models import User, Workplace, Record

@pytest.fixture
async def user():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await User.create(
        telegram_id=123456789,
        username="test_user",
        timezone="Europe/Moscow"
    )
    yield user
    await user.delete()

@pytest.fixture
async def workplace(user):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"""
    workplace = await Workplace.create(
        user=user,
        name="Test Workplace",
        rate=1000.50
    )
    yield workplace
    await workplace.delete()

@pytest.fixture
async def record(user, workplace):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    now = datetime.now()
    record = await Record.create(
        user=user,
        workplace=workplace,
        start_time=now.replace(hour=9, minute=0),
        end_time=now.replace(hour=17, minute=0),
        description="Test record"
    )
    yield record
    await record.delete()

def test_create_calendar_keyboard():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    current_date = datetime(2024, 3, 20)
    keyboard = create_calendar_keyboard(current_date)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    assert "March 2024" in keyboard.inline_keyboard[0][1].text
    assert "‚óÄÔ∏è" in keyboard.inline_keyboard[0][0].text
    assert "‚ñ∂Ô∏è" in keyboard.inline_keyboard[0][2].text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    for i, day in enumerate(weekdays):
        assert keyboard.inline_keyboard[1][i].text == day
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è"
    assert "üìÖ –°–µ–≥–æ–¥–Ω—è" in keyboard.inline_keyboard[-1][0].text

@pytest.mark.asyncio
async def test_get_day_records(user, workplace, record):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∑–∞ –¥–µ–Ω—å"""
    today = datetime.now()
    records_text = await get_day_records(user.telegram_id, today)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏
    assert workplace.name in records_text
    assert "09:00" in records_text
    assert "17:00" in records_text
    assert "8.0 —á" in records_text
    assert "8000.00 —Ä—É–±" in records_text
    assert "Test record" in records_text

@pytest.mark.asyncio
async def test_calendar_handler(message):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /calendar"""
    response = await calendar_handler(message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    assert "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å" in response.text
    assert "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π" in response.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    assert response.reply_markup is not None
    assert isinstance(response.reply_markup, types.InlineKeyboardMarkup)

@pytest.mark.asyncio
async def test_calendar_callback_handler(callback_query, user, workplace, record):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    # –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    callback_query.data = f"calendar:next:{datetime.now().strftime('%Y-%m')}"
    await calendar_callback_handler(callback_query)
    assert callback_query.message.edit_reply_markup.called
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–Ω—è
    today = datetime.now()
    callback_query.data = f"calendar:day:{today.strftime('%Y-%m-%d')}"
    await calendar_callback_handler(callback_query)
    
    message_text = callback_query.message.edit_text.call_args[0][0]
    assert today.strftime('%d.%m.%Y') in message_text
    assert workplace.name in message_text
    assert "Test record" in message_text
    
    # –¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    callback_query.data = "calendar:back"
    await calendar_callback_handler(callback_query)
    assert "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π" in callback_query.message.edit_text.call_args[0][0]

@pytest.mark.asyncio
async def test_empty_day_records(user):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∑–∞ –¥–µ–Ω—å –±–µ–∑ –∑–∞–ø–∏—Å–µ–π"""
    today = datetime.now()
    records_text = await get_day_records(user.telegram_id, today)
    assert "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å" in records_text

@pytest.mark.asyncio
async def test_calendar_navigation():
    """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
    current_date = datetime(2024, 3, 20)
    
    # –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    next_month = current_date.replace(month=4)
    keyboard = create_calendar_keyboard(next_month)
    assert "April 2024" in keyboard.inline_keyboard[0][1].text
    
    # –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    prev_month = current_date.replace(month=2)
    keyboard = create_calendar_keyboard(prev_month)
    assert "February 2024" in keyboard.inline_keyboard[0][1].text
    
    # –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
    next_year = current_date.replace(year=2025, month=1)
    keyboard = create_calendar_keyboard(next_year)
    assert "January 2025" in keyboard.inline_keyboard[0][1].text 