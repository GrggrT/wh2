from datetime import datetime, timedelta
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.markdown import text, bold, code
from app.db.models import User, Record, Workplace
from app.utils.analytics import analytics
from app.utils.export import export_manager

class ReportForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞"""
    waiting_for_period = State()
    waiting_for_start_date = State()
    waiting_for_end_date = State()
    waiting_for_export_format = State()

async def reports_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reports"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add("–ó–∞ —Å–µ–≥–æ–¥–Ω—è")
    keyboard.add("–ó–∞ –Ω–µ–¥–µ–ª—é")
    keyboard.add("–ó–∞ –º–µ—Å—è—Ü")
    keyboard.add("–ó–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    keyboard.add("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    keyboard.add("–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    keyboard.add("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞")
    keyboard.add("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    await ReportForm.waiting_for_period.set()
    await message.reply(
        text(
            bold("üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"),
            "",
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
            sep="\n"
        ),
        reply_markup=keyboard,
        parse_mode=types.ParseMode.MARKDOWN
    )

async def process_period_choice(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    today = datetime.now().date()
    
    if message.text == "–ó–∞ —Å–µ–≥–æ–¥–Ω—è":
        start_date = today
        end_date = today
        await generate_report(message, start_date, end_date)
        await state.finish()
    
    elif message.text == "–ó–∞ –Ω–µ–¥–µ–ª—é":
        start_date = today - timedelta(days=7)
        end_date = today
        await generate_report(message, start_date, end_date)
        await state.finish()
    
    elif message.text == "–ó–∞ –º–µ—Å—è—Ü":
        start_date = today - timedelta(days=30)
        end_date = today
        await generate_report(message, start_date, end_date)
        await state.finish()
    
    elif message.text == "–ó–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥":
        await ReportForm.waiting_for_start_date.set()
        await message.reply(
            text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.02.2024",
                sep="\n"
            ),
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode=types.ParseMode.MARKDOWN
        )
    
    elif message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏":
        await generate_efficiency_report(message)
        await state.finish()
    
    elif message.text == "–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏":
        await generate_activity_chart(message)
        await state.finish()
    
    elif message.text == "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞":
        await generate_heatmap(message)
        await state.finish()
    
    elif message.text == "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add("CSV")
        keyboard.add("JSON")
        keyboard.add("Excel")
        keyboard.add("–û—Ç–º–µ–Ω–∞")
        
        await ReportForm.waiting_for_export_format.set()
        await message.reply(
            text(
                bold("üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"),
                "",
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                sep="\n"
            ),
            reply_markup=keyboard,
            parse_mode=types.ParseMode.MARKDOWN
        )
    
    else:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            parse_mode=types.ParseMode.MARKDOWN
        )

async def process_export_format(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.reply(
            "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode=types.ParseMode.MARKDOWN
        )
        return
    
    format_mapping = {
        "CSV": "csv",
        "JSON": "json",
        "Excel": "xlsx"
    }
    
    if message.text not in format_mapping:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            parse_mode=types.ParseMode.MARKDOWN
        )
        return
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    export_format = format_mapping[message.text]
    file_path = await export_manager.export_records(
        user_id=message.from_user.id,
        export_format=export_format
    )
    
    if not file_path:
        await message.reply(
            text(
                bold("‚ùå –û—à–∏–±–∫–∞"),
                "",
                "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
                "–í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
                sep="\n"
            ),
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode=types.ParseMode.MARKDOWN
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.reply_document(
            types.InputFile(
                file_path,
                filename=f"worktime_export_{datetime.now().strftime('%Y%m%d')}{file_path.suffix}"
            ),
            caption=text(
                bold("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"),
                "",
                "–í —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å—è—Ö",
                sep="\n"
            ),
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode=types.ParseMode.MARKDOWN
        )
    
    await state.finish()

async def process_start_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã"""
    try:
        start_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        
        async with state.proxy() as data:
            data['start_date'] = start_date
        
        await ReportForm.waiting_for_end_date.set()
        await message.reply(
            text(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 28.02.2024",
                sep="\n"
            ),
            parse_mode=types.ParseMode.MARKDOWN
        )
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì",
            parse_mode=types.ParseMode.MARKDOWN
        )

async def process_end_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã"""
    try:
        end_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        
        async with state.proxy() as data:
            start_date = data['start_date']
            
            if end_date < start_date:
                await message.reply(
                    "‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π",
                    parse_mode=types.ParseMode.MARKDOWN
                )
                return
            
            await generate_report(message, start_date, end_date)
        
        await state.finish()
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì",
            parse_mode=types.ParseMode.MARKDOWN
        )

async def generate_report(message: types.Message, start_date: datetime.date, end_date: datetime.date):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    user = await User.get(telegram_id=message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    records = await Record.filter(
        user=user,
        start_time__gte=datetime.combine(start_date, datetime.min.time()),
        start_time__lte=datetime.combine(end_date, datetime.max.time())
    ).prefetch_related('workplace')
    
    if not records:
        await message.reply(
            text(
                bold("üìä –û—Ç—á—ë—Ç"),
                f"–ó–∞ –ø–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}",
                "",
                "–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                sep="\n"
            ),
            parse_mode=types.ParseMode.MARKDOWN
        )
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ä–∞–±–æ—á–∏–º –º–µ—Å—Ç–∞–º
    workplace_stats = {}
    total_duration = timedelta()
    total_cost = 0.0
    
    for record in records:
        duration = record.end_time - record.start_time
        cost = duration.total_seconds() / 3600 * float(record.workplace.rate)
        
        if record.workplace.name not in workplace_stats:
            workplace_stats[record.workplace.name] = {
                'duration': duration,
                'cost': cost,
                'count': 1
            }
        else:
            workplace_stats[record.workplace.name]['duration'] += duration
            workplace_stats[record.workplace.name]['cost'] += cost
            workplace_stats[record.workplace.name]['count'] += 1
        
        total_duration += duration
        total_cost += cost
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report_lines = [
        bold("üìä –û—Ç—á—ë—Ç"),
        f"–ó–∞ –ø–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}",
        "",
        bold("–ü–æ —Ä–∞–±–æ—á–∏–º –º–µ—Å—Ç–∞–º:"),
    ]
    
    for workplace, stats in workplace_stats.items():
        duration_hours = stats['duration'].total_seconds() / 3600
        report_lines.extend([
            f"üìç {workplace}:",
            f"   ‚è± –ß–∞—Å–æ–≤: {duration_hours:.2f}",
            f"   üí∞ –°—É–º–º–∞: {stats['cost']:.2f} —Ä—É–±",
            f"   üìù –ó–∞–ø–∏—Å–µ–π: {stats['count']}",
            ""
        ])
    
    total_hours = total_duration.total_seconds() / 3600
    report_lines.extend([
        bold("–ò—Ç–æ–≥–æ:"),
        f"‚è± –í—Å–µ–≥–æ —á–∞—Å–æ–≤: {total_hours:.2f}",
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_cost:.2f} —Ä—É–±",
        f"üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}"
    ])
    
    await message.reply(
        text(*report_lines, sep="\n"),
        parse_mode=types.ParseMode.MARKDOWN
    )

async def generate_efficiency_report(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    metrics = await analytics.get_efficiency_metrics(message.from_user.id)
    
    if not metrics:
        await message.reply(
            text(
                bold("‚ùå –û—à–∏–±–∫–∞"),
                "",
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                sep="\n"
            ),
            parse_mode=types.ParseMode.MARKDOWN
        )
        return
    
    report_lines = [
        bold("üìä –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"),
        "",
        f"‚è± –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: {metrics['total_hours']:.2f}",
        f"üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {metrics['total_earnings']:.2f} —Ä—É–±",
        f"üìà –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å: {metrics['avg_daily_hours']:.2f}",
        f"‚ú® –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {metrics['efficiency_score']:.1f}%",
        "",
        bold("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:"),
        metrics['recommendation']
    ]
    
    await message.reply(
        text(*report_lines, sep="\n"),
        parse_mode=types.ParseMode.MARKDOWN
    )

async def generate_activity_chart(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    chart_data = await analytics.generate_activity_chart()
    
    if not chart_data:
        await message.reply(
            text(
                bold("‚ùå –û—à–∏–±–∫–∞"),
                "",
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                sep="\n"
            ),
            parse_mode=types.ParseMode.MARKDOWN
        )
        return
    
    await message.reply_photo(
        types.InputFile(chart_data),
        caption=text(
            bold("üìà –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"),
            "",
            "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–Ω—è–º",
            sep="\n"
        ),
        parse_mode=types.ParseMode.MARKDOWN
    )

async def generate_heatmap(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã"""
    heatmap_data = await analytics.generate_heatmap()
    
    if not heatmap_data:
        await message.reply(
            text(
                bold("‚ùå –û—à–∏–±–∫–∞"),
                "",
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É",
                sep="\n"
            ),
            parse_mode=types.ParseMode.MARKDOWN
        )
        return
    
    await message.reply_photo(
        types.InputFile(heatmap_data),
        caption=text(
            bold("üå° –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"),
            "",
            "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —á–∞—Å–∞–º",
            sep="\n"
        ),
        parse_mode=types.ParseMode.MARKDOWN
    )

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.register_message_handler(reports_handler, commands=['reports'])
    dp.register_message_handler(process_period_choice, state=ReportForm.waiting_for_period)
    dp.register_message_handler(process_start_date, state=ReportForm.waiting_for_start_date)
    dp.register_message_handler(process_end_date, state=ReportForm.waiting_for_end_date)
    dp.register_message_handler(process_export_format, state=ReportForm.waiting_for_export_format) 