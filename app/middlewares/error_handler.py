import os
import logging
import traceback
from aiogram import types
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils.markdown import text, bold, code

logger = logging.getLogger(__name__)

class ErrorHandlerMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    async def __call__(self, handler, event, data):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
        
        :param handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
        :param event: –°–æ–±—ã—Ç–∏–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ, callback –∏ —Ç.–¥.)
        :param data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            return await handler(event, data)
        except Exception as e:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏
            error_msg = "".join(traceback.format_exception(type(e), e, e.__traceback__))
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {error_msg}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if isinstance(event, types.Message):
                error_text = text(
                    bold("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"),
                    "",
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    "",
                    f"–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: {str(e)}",
                    sep="\n"
                )
                
                await event.reply(
                    error_text,
                    parse_mode=types.ParseMode.MARKDOWN
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                admin_id = os.getenv("ADMIN_ID")
                if admin_id:
                    bot = data.get("bot")
                    if bot:
                        admin_error_text = text(
                            bold("üî¥ –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ"),
                            "",
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {event.from_user.id} (@{event.from_user.username})",
                            f"–ö–æ–º–∞–Ω–¥–∞: {event.text}",
                            "",
                            "–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:",
                            code(error_msg[:3000]),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                            sep="\n"
                        )
                        
                        try:
                            await bot.send_message(
                                admin_id,
                                admin_error_text,
                                parse_mode=types.ParseMode.MARKDOWN
                            )
                        except Exception as send_err:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {send_err}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
            return True 