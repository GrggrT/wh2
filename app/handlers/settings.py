from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.markdown import text, bold, code
from app.db.models import User
from app.utils.timezone import timezone_db

class SettingsForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    waiting_for_timezone = State()
    waiting_for_location = State()

async def settings_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    user = await User.get(telegram_id=message.from_user.id)
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add("–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
    keyboard.add("–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
    keyboard.add("–ù–∞–∑–∞–¥")
    
    settings_text = text(
        bold("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        "",
        f"üåê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.timezone}",
        "",
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        sep="\n"
    )
    
    await message.reply(
        settings_text,
        reply_markup=keyboard,
        parse_mode=types.ParseMode.MARKDOWN
    )

async def process_settings_choice(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        timezones = [
            "Europe/Moscow", "Europe/London", "Europe/Paris", "Europe/Berlin",
            "Asia/Tokyo", "Asia/Singapore", "America/New_York", "America/Los_Angeles"
        ]
        for tz in timezones:
            keyboard.add(tz)
        keyboard.add("–ù–∞–∑–∞–¥")
        
        await SettingsForm.waiting_for_timezone.set()
        await message.reply(
            text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–ø–∏—Å–∫–∞",
                "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ",
                "",
                "–ù–∞–ø—Ä–∏–º–µ—Ä: Moscow, New York, London",
                sep="\n"
            ),
            reply_markup=keyboard,
            parse_mode=types.ParseMode.MARKDOWN
        )
    
    elif message.text == "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True))
        keyboard.add("–ù–∞–∑–∞–¥")
        
        await SettingsForm.waiting_for_location.set()
        await message.reply(
            text(
                "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞",
                "",
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é' –Ω–∏–∂–µ",
                sep="\n"
            ),
            reply_markup=keyboard,
            parse_mode=types.ParseMode.MARKDOWN
        )
    
    elif message.text == "–ù–∞–∑–∞–¥":
        await message.reply(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode=types.ParseMode.MARKDOWN
        )
    
    else:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é",
            parse_mode=types.ParseMode.MARKDOWN
        )

async def process_timezone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    if message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        await settings_handler(message)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        timezone_info = await timezone_db.get_time_zone_by_zone(message.text)
        if not timezone_info:
            await message.reply(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.",
                parse_mode=types.ParseMode.MARKDOWN
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await User.get(telegram_id=message.from_user.id)
        user.timezone = timezone_info["timezone"]
        await user.save()
        
        await message.reply(
            text(
                bold("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"),
                "",
                f"üåê –ù–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_info['timezone']}",
                f"‚è∞ –°–º–µ—â–µ–Ω–∏–µ: {timezone_info['formatted']}",
                sep="\n"
            ),
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode=types.ParseMode.MARKDOWN
        )
        
        await state.finish()
    
    except Exception as e:
        await message.reply(
            text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞",
                "",
                str(e),
                sep="\n"
            ),
            parse_mode=types.ParseMode.MARKDOWN
        )

async def process_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    if not message.location:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ",
            parse_mode=types.ParseMode.MARKDOWN
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        timezone_info = await timezone_db.get_time_zone(
            message.location.latitude,
            message.location.longitude
        )
        
        if not timezone_info:
            await message.reply(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏",
                parse_mode=types.ParseMode.MARKDOWN
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await User.get(telegram_id=message.from_user.id)
        user.timezone = timezone_info["timezone"]
        await user.save()
        
        await message.reply(
            text(
                bold("‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"),
                "",
                f"üåê –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_info['timezone']}",
                f"‚è∞ –°–º–µ—â–µ–Ω–∏–µ: {timezone_info['formatted']}",
                f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {message.location.latitude:.6f}, {message.location.longitude:.6f}",
                sep="\n"
            ),
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode=types.ParseMode.MARKDOWN
        )
        
        await state.finish()
    
    except Exception as e:
        await message.reply(
            text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞",
                "",
                str(e),
                sep="\n"
            ),
            parse_mode=types.ParseMode.MARKDOWN
        )

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.register_message_handler(settings_handler, commands=['settings'])
    dp.register_message_handler(process_settings_choice, lambda msg: msg.text in [
        "–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
        "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏",
        "–ù–∞–∑–∞–¥"
    ])
    dp.register_message_handler(process_timezone, state=SettingsForm.waiting_for_timezone)
    dp.register_message_handler(process_location, content_types=['location'], state=SettingsForm.waiting_for_location) 