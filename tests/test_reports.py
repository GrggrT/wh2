import pytest
from datetime import datetime, timedelta
from unittest.mock import Mock, patch
from aiogram import types
from app.handlers.reports import (
    reports_handler,
    process_period_choice,
    generate_report,
    generate_efficiency_report,
    generate_activity_chart,
    generate_heatmap,
    process_export_format
)
from app.db.models import User, Workplace, Record
from pathlib import Path

@pytest.fixture
async def user():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await User.create(
        telegram_id=123456789,
        username="test_user",
        timezone="Europe/Moscow"
    )
    yield user
    await user.delete()

@pytest.fixture
async def workplace(user):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"""
    workplace = await Workplace.create(
        user=user,
        name="Test Workplace",
        rate=1000.50
    )
    yield workplace
    await workplace.delete()

@pytest.fixture
async def records(user, workplace):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    records = []
    start_time = datetime.now() - timedelta(days=7)
    
    for i in range(5):
        record = await Record.create(
            user=user,
            workplace=workplace,
            start_time=start_time + timedelta(days=i, hours=9),
            end_time=start_time + timedelta(days=i, hours=17)
        )
        records.append(record)
    
    yield records
    
    for record in records:
        await record.delete()

@pytest.fixture
def message():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message = Mock(spec=types.Message)
    message.from_user = Mock()
    message.from_user.id = 123456789
    message.reply = Mock()
    message.reply_photo = Mock()
    return message

@pytest.mark.asyncio
async def test_reports_handler(message):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reports"""
    await reports_handler(message)
    
    message.reply.assert_called_once()
    args = message.reply.call_args[1]
    assert "üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞" in args["text"]
    assert isinstance(args["reply_markup"], types.ReplyKeyboardMarkup)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    keyboard = args["reply_markup"].keyboard
    button_texts = [button.text for row in keyboard for button in row]
    assert "–ó–∞ —Å–µ–≥–æ–¥–Ω—è" in button_texts
    assert "–ó–∞ –Ω–µ–¥–µ–ª—é" in button_texts
    assert "–ó–∞ –º–µ—Å—è—Ü" in button_texts
    assert "–ó–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥" in button_texts
    assert "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" in button_texts
    assert "–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" in button_texts
    assert "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞" in button_texts

@pytest.mark.asyncio
async def test_process_period_choice(message, user, records):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    # –¢–µ—Å—Ç –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    message.text = "–ó–∞ —Å–µ–≥–æ–¥–Ω—è"
    await process_period_choice(message, Mock())
    
    message.reply.assert_called_once()
    assert "üìä –û—Ç—á—ë—Ç" in message.reply.call_args[1]["text"]
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫
    message.reply.reset_mock()
    
    # –¢–µ—Å—Ç –æ—Ç—á–µ—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
    message.text = "–ó–∞ –Ω–µ–¥–µ–ª—é"
    await process_period_choice(message, Mock())
    
    message.reply.assert_called_once()
    assert "üìä –û—Ç—á—ë—Ç" in message.reply.call_args[1]["text"]
    
    # –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    message.reply.reset_mock()
    message.text = "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
    await process_period_choice(message, Mock())
    
    message.reply.assert_called_once()
    assert "‚ùå" in message.reply.call_args[1]["text"]

@pytest.mark.asyncio
async def test_generate_report(message, user, workplace, records):
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"""
    start_date = datetime.now().date() - timedelta(days=7)
    end_date = datetime.now().date()
    
    await generate_report(message, start_date, end_date)
    
    message.reply.assert_called_once()
    report_text = message.reply.call_args[1]["text"]
    
    assert "üìä –û—Ç—á—ë—Ç" in report_text
    assert workplace.name in report_text
    assert "–ò—Ç–æ–≥–æ" in report_text
    assert "–í—Å–µ–≥–æ —á–∞—Å–æ–≤" in report_text
    assert "–û–±—â–∞—è —Å—É–º–º–∞" in report_text

@pytest.mark.asyncio
async def test_generate_efficiency_report(message, user, records):
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ–± —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    # –ú–æ–∫–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    mock_metrics = {
        "total_hours": 40.0,
        "total_earnings": 40000.0,
        "avg_daily_hours": 8.0,
        "efficiency_score": 85.0,
        "recommendation": "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    }
    
    with patch('app.utils.analytics.analytics.get_efficiency_metrics', return_value=mock_metrics):
        await generate_efficiency_report(message)
        
        message.reply.assert_called_once()
        report_text = message.reply.call_args[1]["text"]
        
        assert "üìä –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" in report_text
        assert "40.0" in report_text
        assert "40000.0" in report_text
        assert "85.0%" in report_text
        assert "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!" in report_text

@pytest.mark.asyncio
async def test_generate_activity_chart(message, user, records):
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    # –ú–æ–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–∞
    mock_chart_data = b"test_chart_data"
    
    with patch('app.utils.analytics.analytics.generate_activity_chart', return_value=mock_chart_data):
        await generate_activity_chart(message)
        
        message.reply_photo.assert_called_once()
        call_args = message.reply_photo.call_args[1]
        
        assert isinstance(call_args["photo"], types.InputFile)
        assert "üìà –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" in call_args["caption"]

@pytest.mark.asyncio
async def test_generate_heatmap(message, user, records):
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã"""
    # –ú–æ–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç—ã
    mock_heatmap_data = b"test_heatmap_data"
    
    with patch('app.utils.analytics.analytics.generate_heatmap', return_value=mock_heatmap_data):
        await generate_heatmap(message)
        
        message.reply_photo.assert_called_once()
        call_args = message.reply_photo.call_args[1]
        
        assert isinstance(call_args["photo"], types.InputFile)
        assert "üå° –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" in call_args["caption"]

@pytest.mark.asyncio
async def test_error_handling(message):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    # –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    with patch('app.utils.analytics.analytics.generate_activity_chart', return_value=None):
        await generate_activity_chart(message)
        
        message.reply.assert_called_once()
        assert "‚ùå –û—à–∏–±–∫–∞" in message.reply.call_args[1]["text"]
    
    # –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
    message.reply.reset_mock()
    with patch('app.utils.analytics.analytics.generate_heatmap', return_value=None):
        await generate_heatmap(message)
        
        message.reply.assert_called_once()
        assert "‚ùå –û—à–∏–±–∫–∞" in message.reply.call_args[1]["text"]
    
    # –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫
    message.reply.reset_mock()
    with patch('app.utils.analytics.analytics.get_efficiency_metrics', return_value=None):
        await generate_efficiency_report(message)
        
        message.reply.assert_called_once()
        assert "‚ùå –û—à–∏–±–∫–∞" in message.reply.call_args[1]["text"]

@pytest.mark.asyncio
async def test_export_option(message):
    """–¢–µ—Å—Ç –æ–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –º–µ–Ω—é"""
    await reports_handler(message)
    
    message.reply.assert_called_once()
    args = message.reply.call_args[1]
    assert "üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞" in args["text"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    keyboard = args["reply_markup"].keyboard
    button_texts = [button.text for row in keyboard for button in row]
    assert "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö" in button_texts

@pytest.mark.asyncio
async def test_export_format_selection(message):
    """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    message.text = "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
    state = Mock()
    
    await process_period_choice(message, state)
    
    message.reply.assert_called_once()
    args = message.reply.call_args[1]
    assert "üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö" in args["text"]
    assert isinstance(args["reply_markup"], types.ReplyKeyboardMarkup)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤
    keyboard = args["reply_markup"].keyboard
    button_texts = [button.text for row in keyboard for button in row]
    assert "CSV" in button_texts
    assert "JSON" in button_texts
    assert "Excel" in button_texts
    assert "–û—Ç–º–µ–Ω–∞" in button_texts

@pytest.mark.asyncio
async def test_export_to_csv(message, user, records):
    """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV"""
    message.text = "CSV"
    state = Mock()
    
    # –ú–æ–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
    mock_file = Path("test_export.csv")
    with patch('app.utils.export.export_manager.export_records', return_value=mock_file):
        await process_export_format(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞
        message.reply_document.assert_called_once()
        call_args = message.reply_document.call_args[1]
        assert isinstance(call_args["document"], types.InputFile)
        assert call_args["document"].filename.endswith(".csv")
        assert "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã" in call_args["caption"]

@pytest.mark.asyncio
async def test_export_to_json(message, user, records):
    """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON"""
    message.text = "JSON"
    state = Mock()
    
    # –ú–æ–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
    mock_file = Path("test_export.json")
    with patch('app.utils.export.export_manager.export_records', return_value=mock_file):
        await process_export_format(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞
        message.reply_document.assert_called_once()
        call_args = message.reply_document.call_args[1]
        assert isinstance(call_args["document"], types.InputFile)
        assert call_args["document"].filename.endswith(".json")
        assert "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã" in call_args["caption"]

@pytest.mark.asyncio
async def test_export_to_excel(message, user, records):
    """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel"""
    message.text = "Excel"
    state = Mock()
    
    # –ú–æ–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
    mock_file = Path("test_export.xlsx")
    with patch('app.utils.export.export_manager.export_records', return_value=mock_file):
        await process_export_format(message, state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞
        message.reply_document.assert_called_once()
        call_args = message.reply_document.call_args[1]
        assert isinstance(call_args["document"], types.InputFile)
        assert call_args["document"].filename.endswith(".xlsx")
        assert "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã" in call_args["caption"]

@pytest.mark.asyncio
async def test_export_cancel(message):
    """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    message.text = "–û—Ç–º–µ–Ω–∞"
    state = Mock()
    
    await process_export_format(message, state)
    
    message.reply.assert_called_once()
    assert "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω" in message.reply.call_args[1]["text"]
    state.finish.assert_called_once()

@pytest.mark.asyncio
async def test_export_invalid_format(message):
    """–¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    message.text = "Invalid Format"
    state = Mock()
    
    await process_export_format(message, state)
    
    message.reply.assert_called_once()
    assert "‚ùå" in message.reply.call_args[1]["text"]
    assert "–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç" in message.reply.call_args[1]["text"]

@pytest.mark.asyncio
async def test_export_no_data(message, user):
    """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    message.text = "CSV"
    state = Mock()
    
    # –ú–æ–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
    with patch('app.utils.export.export_manager.export_records', return_value=None):
        await process_export_format(message, state)
        
        message.reply.assert_called_once()
        assert "‚ùå –û—à–∏–±–∫–∞" in message.reply.call_args[1]["text"]
        assert "–Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π" in message.reply.call_args[1]["text"]

@pytest.mark.asyncio
async def test_export_error_handling(message, user):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ"""
    message.text = "CSV"
    state = Mock()
    
    # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ
    with patch('app.utils.export.export_manager.export_records', side_effect=Exception("Test error")):
        await process_export_format(message, state)
        
        message.reply.assert_called_once()
        assert "‚ùå –û—à–∏–±–∫–∞" in message.reply.call_args[1]["text"] 