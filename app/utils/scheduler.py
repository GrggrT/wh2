import os
import logging
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import Bot
from app.db.models import User, Record, Workplace
from tortoise.transactions import atomic
from app.utils.timezone_sync import timezone_sync

logger = logging.getLogger(__name__)

class TaskScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    
    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        
        :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.bot = bot
        self.scheduler = AsyncIOScheduler()
        self._setup_jobs()
    
    def _setup_jobs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö
        self.scheduler.add_job(
            self.check_unfinished_records,
            CronTrigger(hour=20),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00
            id='check_unfinished_records',
            replace_existing=True
        )
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        self.scheduler.add_job(
            self.send_weekly_reports,
            CronTrigger(day_of_week='sun', hour=23),  # –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 23:00
            id='weekly_reports',
            replace_existing=True
        )
        
        # –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.scheduler.add_job(
            self.cleanup_old_data,
            CronTrigger(day=1, hour=2),  # –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 02:00
            id='cleanup_old_data',
            replace_existing=True
        )
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.scheduler.add_job(
            self.backup_database,
            CronTrigger(hour=3),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 03:00
            id='backup_database',
            replace_existing=True
        )
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
        self.scheduler.add_job(
            timezone_sync.sync_all_users,
            CronTrigger(hour=4),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 04:00
            id='timezone_sync',
            replace_existing=True
        )
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
    
    def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.shutdown()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def check_unfinished_records(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            unfinished_records = await Record.filter(
                end_time__isnull=True
            ).prefetch_related('user', 'workplace')
            
            for record in unfinished_records:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å —Å–µ–≥–æ–¥–Ω—è
                if record.start_time.date() == datetime.now().date():
                    message = (
                        f"‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å:\n"
                        f"üìç –ú–µ—Å—Ç–æ: {record.workplace.name}\n"
                        f"üïí –ù–∞—á–∞–ª–æ: {record.start_time.strftime('%H:%M')}\n"
                        f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è!"
                    )
                    
                    try:
                        await self.bot.send_message(record.user.telegram_id, message)
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {record.user.telegram_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
    
    async def send_weekly_reports(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await User.all()
            week_ago = datetime.now() - timedelta(days=7)
            
            for user in users:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
                records = await Record.filter(
                    user=user,
                    start_time__gte=week_ago
                ).prefetch_related('workplace')
                
                if not records:
                    continue
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ä–∞–±–æ—á–∏–º –º–µ—Å—Ç–∞–º
                workplace_stats = {}
                total_duration = timedelta()
                total_earnings = 0
                
                for record in records:
                    if not record.end_time:
                        continue
                    
                    duration = record.end_time - record.start_time
                    earnings = duration.total_seconds() / 3600 * float(record.workplace.rate)
                    
                    if record.workplace.name not in workplace_stats:
                        workplace_stats[record.workplace.name] = {
                            'duration': duration,
                            'earnings': earnings
                        }
                    else:
                        workplace_stats[record.workplace.name]['duration'] += duration
                        workplace_stats[record.workplace.name]['earnings'] += earnings
                    
                    total_duration += duration
                    total_earnings += earnings
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                report = [
                    "üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç",
                    f"–ó–∞ –ø–µ—Ä–∏–æ–¥: {week_ago.strftime('%d.%m.%Y')} - {datetime.now().strftime('%d.%m.%Y')}",
                    ""
                ]
                
                for workplace, stats in workplace_stats.items():
                    hours = stats['duration'].total_seconds() / 3600
                    report.extend([
                        f"üìç {workplace}:",
                        f"‚è± –ß–∞—Å–æ–≤: {hours:.2f}",
                        f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['earnings']:.2f} —Ä—É–±",
                        ""
                    ])
                
                total_hours = total_duration.total_seconds() / 3600
                report.extend([
                    "–ò—Ç–æ–≥–æ:",
                    f"‚è± –í—Å–µ–≥–æ —á–∞—Å–æ–≤: {total_hours:.2f}",
                    f"üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {total_earnings:.2f} —Ä—É–±"
                ])
                
                try:
                    await self.bot.send_message(user.telegram_id, "\n".join(report))
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    @atomic()
    async def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 1 –≥–æ–¥–∞
            year_ago = datetime.now() - timedelta(days=365)
            deleted_count = await Record.filter(start_time__lt=year_ago).delete()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞
            workplaces = await Workplace.all()
            for workplace in workplaces:
                records_count = await Record.filter(workplace=workplace).count()
                if records_count == 0:
                    await workplace.delete()
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ: {workplace.name}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def backup_database(self):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            db_name = os.getenv("DB_NAME")
            db_user = os.getenv("DB_USER")
            db_password = os.getenv("DB_PASSWORD")
            db_host = os.getenv("DB_HOST")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –±—ç–∫–∞–ø–∞
            backup_dir = "backups"
            os.makedirs(backup_dir, exist_ok=True)
            
            backup_file = os.path.join(
                backup_dir,
                f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.sql"
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è pg_dump
            command = (
                f"PGPASSWORD='{db_password}' pg_dump "
                f"-h {db_host} -U {db_user} -d {db_name} "
                f"-F p -f {backup_file}"
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            result = os.system(command)
            
            if result == 0:
                logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
                for file in os.listdir(backup_dir):
                    file_path = os.path.join(backup_dir, file)
                    if os.path.getctime(file_path) < (datetime.now() - timedelta(days=7)).timestamp():
                        os.remove(file_path)
                        logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {file}")
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏, –∫–æ–¥: {result}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler: TaskScheduler = None

def setup_scheduler(bot: Bot):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    global scheduler
    scheduler = TaskScheduler(bot)
    scheduler.start()
    return scheduler 