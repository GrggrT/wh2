from datetime import datetime, timedelta
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.markdown import text, bold, code
from app.db.models import User, Record, Workplace

class CalendarForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    viewing_date = State()
    editing_record = State()

def create_calendar_keyboard(current_date: datetime) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    keyboard = types.InlineKeyboardMarkup(row_width=7)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    nav_row = [
        types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"calendar:prev:{current_date.strftime('%Y-%m')}"),
        types.InlineKeyboardButton(f"{current_date.strftime('%B %Y')}", callback_data="ignore"),
        types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"calendar:next:{current_date.strftime('%Y-%m')}")
    ]
    keyboard.row(*nav_row)
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    weekday_buttons = [types.InlineKeyboardButton(day, callback_data="ignore") for day in weekdays]
    keyboard.row(*weekday_buttons)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    first_day = current_date.replace(day=1)
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    if current_date.month == 12:
        last_day = current_date.replace(year=current_date.year + 1, month=1, day=1) - timedelta(days=1)
    else:
        last_day = current_date.replace(month=current_date.month + 1, day=1) - timedelta(days=1)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    current = first_day - timedelta(days=first_day.weekday())
    while current <= last_day + timedelta(days=6-last_day.weekday()):
        week = []
        for _ in range(7):
            if current.month == current_date.month:
                week.append(types.InlineKeyboardButton(
                    str(current.day),
                    callback_data=f"calendar:day:{current.strftime('%Y-%m-%d')}"
                ))
            else:
                week.append(types.InlineKeyboardButton(" ", callback_data="ignore"))
            current += timedelta(days=1)
        keyboard.row(*week)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è"
    keyboard.row(types.InlineKeyboardButton(
        "üìÖ –°–µ–≥–æ–¥–Ω—è",
        callback_data=f"calendar:today"
    ))
    
    return keyboard

async def get_day_records(user_id: int, date: datetime) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∑–∞ –¥–µ–Ω—å"""
    user = await User.get(telegram_id=user_id)
    records = await Record.filter(
        user=user,
        start_time__gte=date.replace(hour=0, minute=0, second=0),
        start_time__lt=date.replace(hour=0, minute=0, second=0) + timedelta(days=1)
    ).prefetch_related('workplace')
    
    if not records:
        return "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å"
    
    result = []
    total_duration = timedelta()
    total_earnings = 0
    
    for record in records:
        if record.end_time:
            duration = record.end_time - record.start_time
            earnings = duration.total_seconds() / 3600 * float(record.workplace.rate)
            total_duration += duration
            total_earnings += earnings
            
            result.extend([
                f"üè¢ {record.workplace.name}",
                f"‚è∞ {record.start_time.strftime('%H:%M')} - {record.end_time.strftime('%H:%M')}",
                f"‚åõÔ∏è {duration.total_seconds() / 3600:.1f} —á",
                f"üí∞ {earnings:.2f} —Ä—É–±",
                f"üìù {record.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}",
                ""
            ])
    
    if result:
        total_hours = total_duration.total_seconds() / 3600
        result.extend([
            bold("–ò—Ç–æ–≥–æ:"),
            f"‚åõÔ∏è {total_hours:.1f} —á",
            f"üí∞ {total_earnings:.2f} —Ä—É–±"
        ])
    
    return "\n".join(result)

async def calendar_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /calendar"""
    current_date = datetime.now()
    keyboard = create_calendar_keyboard(current_date)
    
    await message.reply(
        text(
            bold("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å"),
            "",
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π",
            sep="\n"
        ),
        reply_markup=keyboard,
        parse_mode=types.ParseMode.MARKDOWN
    )

async def calendar_callback_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    action = callback_query.data.split(":")
    
    if action[0] != "calendar" or callback_query.data == "ignore":
        return
    
    if action[1] in ["prev", "next"]:
        current_date = datetime.strptime(action[2], "%Y-%m")
        if action[1] == "prev":
            if current_date.month == 1:
                current_date = current_date.replace(year=current_date.year - 1, month=12)
            else:
                current_date = current_date.replace(month=current_date.month - 1)
        else:
            if current_date.month == 12:
                current_date = current_date.replace(year=current_date.year + 1, month=1)
            else:
                current_date = current_date.replace(month=current_date.month + 1)
        
        keyboard = create_calendar_keyboard(current_date)
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)
    
    elif action[1] == "today":
        current_date = datetime.now()
        keyboard = create_calendar_keyboard(current_date)
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)
    
    elif action[1] == "day":
        selected_date = datetime.strptime(action[2], "%Y-%m-%d")
        records_text = await get_day_records(callback_query.from_user.id, selected_date)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"record:add:{action[2]}"),
            types.InlineKeyboardButton("üìÖ –ö –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="calendar:back")
        )
        
        await callback_query.message.edit_text(
            text(
                bold(f"üìÖ {selected_date.strftime('%d.%m.%Y')}"),
                "",
                records_text,
                sep="\n"
            ),
            reply_markup=keyboard,
            parse_mode=types.ParseMode.MARKDOWN
        )
    
    elif action[1] == "back":
        current_date = datetime.now()
        keyboard = create_calendar_keyboard(current_date)
        await callback_query.message.edit_text(
            text(
                bold("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å"),
                "",
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π",
                sep="\n"
            ),
            reply_markup=keyboard,
            parse_mode=types.ParseMode.MARKDOWN
        )
    
    await callback_query.answer()

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    dp.register_message_handler(calendar_handler, commands=['calendar'])
    dp.register_callback_query_handler(
        calendar_callback_handler,
        lambda c: c.data and (c.data.startswith('calendar:') or c.data == 'ignore')
    ) 