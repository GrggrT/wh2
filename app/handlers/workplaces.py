from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.markdown import text, bold, code
from app.db.models import User, Workplace

class WorkplaceForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"""
    waiting_for_name = State()
    waiting_for_rate = State()

async def workplaces_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /workplaces"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await User.get(telegram_id=message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    workplaces = await Workplace.filter(user=user)
    
    if not workplaces:
        response_text = text(
            bold("üìç –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç"),
            "",
            "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π /add_workplace",
            sep="\n"
        )
    else:
        workplace_list = "\n".join([
            f"üîπ {w.name} - {w.rate} —Ä—É–±/—á–∞—Å" for w in workplaces
        ])
        response_text = text(
            bold("üìç –í–∞—à–∏ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞:"),
            "",
            workplace_list,
            "",
            "–ö–æ–º–∞–Ω–¥—ã:",
            "/add_workplace - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ",
            "/edit_workplace - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ",
            "/delete_workplace - –£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ",
            sep="\n"
        )
    
    await message.reply(response_text, parse_mode=types.ParseMode.MARKDOWN)

async def add_workplace_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"""
    await WorkplaceForm.waiting_for_name.set()
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞:",
        parse_mode=types.ParseMode.MARKDOWN
    )

async def process_workplace_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"""
    async with state.proxy() as data:
        data['name'] = message.text
    
    await WorkplaceForm.waiting_for_rate.set()
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É (–≤ —Ä—É–±–ª—è—Ö):",
        parse_mode=types.ParseMode.MARKDOWN
    )

async def process_workplace_rate(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"""
    try:
        rate = float(message.text)
        if rate < 0:
            raise ValueError("–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
        
        async with state.proxy() as data:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await User.get(telegram_id=message.from_user.id)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ
            workplace = await Workplace.create(
                user=user,
                name=data['name'],
                rate=rate
            )
            
            response_text = text(
                bold("‚úÖ –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!"),
                "",
                f"üìç –ù–∞–∑–≤–∞–Ω–∏–µ: {workplace.name}",
                f"üí∞ –°—Ç–∞–≤–∫–∞: {workplace.rate} —Ä—É–±/—á–∞—Å",
                sep="\n"
            )
            
            await message.reply(response_text, parse_mode=types.ParseMode.MARKDOWN)
    except ValueError:
        await message.reply(
            "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–≤–∫–∏.",
            parse_mode=types.ParseMode.MARKDOWN
        )
        return
    
    await state.finish()

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.register_message_handler(workplaces_handler, commands=['workplaces'])
    dp.register_message_handler(add_workplace_start, commands=['add_workplace'])
    dp.register_message_handler(process_workplace_name, state=WorkplaceForm.waiting_for_name)
    dp.register_message_handler(process_workplace_rate, state=WorkplaceForm.waiting_for_rate) 