from datetime import datetime
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.markdown import text, bold, code
from app.db.models import User, Workplace, Record

class RecordForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    waiting_for_workplace = State()
    waiting_for_start_time = State()
    waiting_for_end_time = State()
    waiting_for_description = State()

async def add_record_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞
    user = await User.get(telegram_id=message.from_user.id)
    workplaces = await Workplace.filter(user=user)
    
    if not workplaces:
        await message.reply(
            text(
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç.",
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π /add_workplace",
                sep="\n"
            ),
            parse_mode=types.ParseMode.MARKDOWN
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–±–æ—á–∏–º–∏ –º–µ—Å—Ç–∞–º–∏
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for workplace in workplaces:
        keyboard.add(workplace.name)
    
    await RecordForm.waiting_for_workplace.set()
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ:",
        reply_markup=keyboard,
        parse_mode=types.ParseMode.MARKDOWN
    )

async def process_workplace(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"""
    user = await User.get(telegram_id=message.from_user.id)
    workplace = await Workplace.get_or_none(user=user, name=message.text)
    
    if not workplace:
        await message.reply(
            "‚ùå –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.",
            parse_mode=types.ParseMode.MARKDOWN
        )
        return
    
    async with state.proxy() as data:
        data['workplace_id'] = workplace.id
    
    await RecordForm.waiting_for_start_time.set()
    await message.reply(
        text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 09:00",
            sep="\n"
        ),
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode=types.ParseMode.MARKDOWN
    )

async def process_start_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞"""
    try:
        time = datetime.strptime(message.text, "%H:%M")
        today = datetime.now().date()
        start_time = datetime.combine(today, time.time())
        
        async with state.proxy() as data:
            data['start_time'] = start_time
        
        await RecordForm.waiting_for_end_time.set()
        await message.reply(
            text(
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 18:00",
                sep="\n"
            ),
            parse_mode=types.ParseMode.MARKDOWN
        )
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú",
            parse_mode=types.ParseMode.MARKDOWN
        )

async def process_end_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    try:
        time = datetime.strptime(message.text, "%H:%M")
        today = datetime.now().date()
        end_time = datetime.combine(today, time.time())
        
        async with state.proxy() as data:
            if end_time <= data['start_time']:
                await message.reply(
                    "‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞",
                    parse_mode=types.ParseMode.MARKDOWN
                )
                return
            
            data['end_time'] = end_time
        
        await RecordForm.waiting_for_description.set()
        await message.reply(
            text(
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                sep="\n"
            ),
            parse_mode=types.ParseMode.MARKDOWN
        )
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú",
            parse_mode=types.ParseMode.MARKDOWN
        )

async def process_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    async with state.proxy() as data:
        description = None if message.text == "/skip" else message.text
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ
        user = await User.get(telegram_id=message.from_user.id)
        workplace = await Workplace.get(id=data['workplace_id'])
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        record = await Record.create(
            user=user,
            workplace=workplace,
            start_time=data['start_time'],
            end_time=data['end_time'],
            description=description
        )
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
        duration = (data['end_time'] - data['start_time']).total_seconds() / 3600
        cost = duration * float(workplace.rate)
        
        response_text = text(
            bold("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"),
            "",
            f"üìç –ú–µ—Å—Ç–æ: {workplace.name}",
            f"üïí –ù–∞—á–∞–ª–æ: {data['start_time'].strftime('%H:%M')}",
            f"üïí –ö–æ–Ω–µ—Ü: {data['end_time'].strftime('%H:%M')}",
            f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f} —á",
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.2f} —Ä—É–±",
            "",
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}",
            sep="\n"
        )
        
        await message.reply(response_text, parse_mode=types.ParseMode.MARKDOWN)
    
    await state.finish()

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.register_message_handler(add_record_start, commands=['add_record'])
    dp.register_message_handler(process_workplace, state=RecordForm.waiting_for_workplace)
    dp.register_message_handler(process_start_time, state=RecordForm.waiting_for_start_time)
    dp.register_message_handler(process_end_time, state=RecordForm.waiting_for_end_time)
    dp.register_message_handler(process_description, state=RecordForm.waiting_for_description) 